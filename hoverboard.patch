diff --git a/Inc/config.h b/Inc/config.h
index 12bd564..50dc0cc 100644
--- a/Inc/config.h
+++ b/Inc/config.h
@@ -9,9 +9,9 @@
 // Keil uVision: select desired variant from the Target drop down menu (to the right of the Load button)
 // Ubuntu: define the desired build variant here if you want to use make in console
 // or use VARIANT environment variable for example like "make -e VARIANT=VARIANT_NUNCHUK". Select only one at a time.
-#if !defined(PLATFORMIO)
+// #if !defined(PLATFORMIO)
   //#define VARIANT_ADC         // Variant for control via ADC input
-  //#define VARIANT_USART       // Variant for Serial control via USART3 input
+  #define VARIANT_USART         // Variant for Serial control via USART3 input
   //#define VARIANT_NUNCHUK     // Variant for Nunchuk controlled vehicle build
   //#define VARIANT_PPM         // Variant for RC-Remote with PPM-Sum Signal
   //#define VARIANT_PWM         // Variant for RC-Remote with PWM Signal
@@ -20,7 +20,7 @@
   //#define VARIANT_HOVERBOARD  // Variant for HOVERBOARD build
   //#define VARIANT_TRANSPOTTER // Variant for TRANSPOTTER build https://github.com/NiklasFauth/hoverboard-firmware-hack/wiki/Build-Instruction:-TranspOtter https://hackaday.io/project/161891-transpotter-ng
   //#define VARIANT_SKATEBOARD  // Variant for SKATEBOARD build
-#endif
+// #endif
 // ########################### END OF VARIANT SELECTION ############################
 
 
@@ -75,10 +75,10 @@
 #define BAT_FILT_COEF           655       // battery voltage filter coefficient in fixed-point. coef_fixedPoint = coef_floatingPoint * 2^16. In this case 655 = 0.01 * 2^16
 #define BAT_CALIB_REAL_VOLTAGE  3970      // input voltage measured by multimeter (multiplied by 100). In this case 43.00 V * 100 = 4300
 #define BAT_CALIB_ADC           1492      // adc-value measured by mainboard (value nr 5 on UART debug output)
-#define BAT_CELLS               10        // battery number of cells. Normal Hoverboard battery: 10s
+#define BAT_CELLS               12        // battery number of cells. Normal Hoverboard battery: 10s
 #define BAT_LVL2_ENABLE         0         // to beep or not to beep, 1 or 0
 #define BAT_LVL1_ENABLE         1         // to beep or not to beep, 1 or 0
-#define BAT_DEAD_ENABLE         1         // to poweroff or not to poweroff, 1 or 0
+#define BAT_DEAD_ENABLE         0         // to poweroff or not to poweroff, 1 or 0
 #define BAT_BLINK_INTERVAL      80        // battery led blink interval (80 loops * 5ms ~= 400ms)
 #define BAT_LVL5                (390 * BAT_CELLS * BAT_CALIB_ADC) / BAT_CALIB_REAL_VOLTAGE    // Green blink:  no beep
 #define BAT_LVL4                (380 * BAT_CELLS * BAT_CALIB_ADC) / BAT_CALIB_REAL_VOLTAGE    // Yellow:       no beep
@@ -147,12 +147,12 @@
 #define MOTOR_RIGHT_ENA                 // [-] Enable RIGHT motor. Comment-out if this motor is not needed to be operational
 
 // Control selections
-#define CTRL_TYP_SEL    FOC_CTRL        // [-] Control type selection: COM_CTRL, SIN_CTRL, FOC_CTRL (default)
+#define CTRL_TYP_SEL    FOC_CTRL        // [-] Control type  4  45 selection: COM_CTRL, SIN_CTRL, FOC_CTRL (default)
 #define CTRL_MOD_REQ    VLT_MODE        // [-] Control mode request: OPEN_MODE, VLT_MODE (default), SPD_MODE, TRQ_MODE. Note: SPD_MODE and TRQ_MODE are only available for CTRL_FOC!
 #define DIAG_ENA        1               // [-] Motor Diagnostics enable flag: 0 = Disabled, 1 = Enabled (default)
 
 // Limitation settings
-#define I_MOT_MAX       15              // [A] Maximum single motor current limit
+#define I_MOT_MAX       10              // [A] Maximum single motor current limit
 #define I_DC_MAX        17              // [A] Maximum stage2 DC Link current limit for Commutation and Sinusoidal types (This is the final current protection. Above this value, current chopping is applied. To avoid this make sure that I_DC_MAX = I_MOT_MAX + 2A)
 #define N_MOT_MAX       1000            // [rpm] Maximum motor speed limit
 
@@ -311,30 +311,24 @@
 
 // ############################ VARIANT_USART SETTINGS ############################
 #ifdef VARIANT_USART
-  // #define SIDEBOARD_SERIAL_USART2 0
-  #define CONTROL_SERIAL_USART2  0    // left sensor board cable, disable if ADC or PPM is used! For Arduino control check the hoverSerial.ino
-  #define FEEDBACK_SERIAL_USART2      // left sensor board cable, disable if ADC or PPM is used!
 
-  // #define SIDEBOARD_SERIAL_USART3 0
-  // #define CONTROL_SERIAL_USART3  0    // right sensor board cable. Number indicates priority for dual-input. Disable if I2C (nunchuk or lcd) is used! For Arduino control check the hoverSerial.ino
-  // #define FEEDBACK_SERIAL_USART3      // right sensor board cable, disable if I2C (nunchuk or lcd) is used!
+  // Use USART2 (left sideboard) for control input
+  #define CONTROL_SERIAL_USART2 0
+  #define FEEDBACK_SERIAL_USART2 0
+  #define USART2_BAUD 9600
 
-  // #define DUAL_INPUTS                 //  UART*(Primary) + SIDEBOARD(Auxiliary). Uncomment this to use Dual-inputs
-  #define PRI_INPUT1             3, -1000, 0, 1000, 0     // TYPE, MIN, MID, MAX, DEADBAND. See INPUT FORMAT section
-  #define PRI_INPUT2             3, -1000, 0, 1000, 0     // TYPE, MIN, MID, MAX, DEADBAND. See INPUT FORMAT section
-  #ifdef DUAL_INPUTS
-    #define FLASH_WRITE_KEY      0x1102  // Flash memory writing key. Change this key to ignore the input calibrations from the flash memory and use the ones in config.h
-    // #define SIDEBOARD_SERIAL_USART2 1   // left sideboard
-    #define SIDEBOARD_SERIAL_USART3 1   // right sideboard
-    #define AUX_INPUT1           3, -1000, 0, 1000, 0     // TYPE, MIN, MID, MAX, DEADBAND. See INPUT FORMAT section
-    #define AUX_INPUT2           3, -1000, 0, 1000, 0     // TYPE, MIN, MID, MAX, DEADBAND. See INPUT FORMAT section
-  #else
-    #define FLASH_WRITE_KEY      0x1002  // Flash memory writing key. Change this key to ignore the input calibrations from the flash memory and use the ones in config.h
-  #endif
+  #define DEBUG_SERIAL_USART3
+  #define DEBUG_SERIAL_PROTOCOL
+  #define USART3_BAUD 9600
+
+  // #define ELECTRIC_BRAKE_ENABLE           // [-] Flag to enable electric brake and replace the motor "freewheel" with a constant braking when the input torque request is 0. Only available and makes sense for TORQUE mode.
+  // #define ELECTRIC_BRAKE_MAX    500       // (0, 500) Maximum electric brake to be applied when input torque request is 0 (pedal fully released).
+  // #define ELECTRIC_BRAKE_THRES  150       // (0, 500) Thr
+
+  #define FLASH_WRITE_KEY    0x1002
+  #define PRI_INPUT1         2, -1000, 0, 1000, 0     // TYPE, MIN, MID, MAX, DEADBAND. See INPUT FORMAT section
+  #define PRI_INPUT2         2, -1000, 0, 1000, 0     // TYPE, MIN, MID, MAX, DEADBAND. See INPUT FORMAT section
 
-  // #define TANK_STEERING              // use for tank steering, each input controls each wheel 
-  // #define SUPPORT_BUTTONS_LEFT       // use left sensor board cable for button inputs.  Disable DEBUG_SERIAL_USART2!
-  // #define SUPPORT_BUTTONS_RIGHT      // use right sensor board cable for button inputs. Disable DEBUG_SERIAL_USART3!
 #endif
 // ######################## END OF VARIANT_USART SETTINGS #########################
 
@@ -608,6 +602,7 @@
   #define FLASH_WRITE_KEY     0x1010    // Flash memory writing key. Change this key to ignore the input calibrations from the flash memory and use the ones in config.h
   #undef  CTRL_MOD_REQ
   #define CTRL_MOD_REQ        TRQ_MODE  // SKATEBOARD works best in TORQUE Mode
+
   // #define CONTROL_PWM_LEFT    0         // use RC PWM as input on the LEFT cable. Number indicates priority for dual-input. Disable DEBUG_SERIAL_USART2!
   #define CONTROL_PWM_RIGHT   0         // use RC PWM as input on the RIGHT cable.  Number indicates priority for dual-input. Disable DEBUG_SERIAL_USART3!
 
@@ -795,4 +790,3 @@
 // ############################# END OF VALIDATE SETTINGS ############################
 
 #endif
-
diff --git a/platformio.ini b/platformio.ini
index d7612db..ae1dcbb 100644
--- a/platformio.ini
+++ b/platformio.ini
@@ -5,47 +5,7 @@
 include_dir = Inc
 src_dir     = Src
 
-;=================== VARIANT SELECTION ==========================
-;
-; Choose one or all variants get built
-;
-;default_envs = VARIANT_ADC         ; Variant for control via ADC input
-;default_envs = VARIANT_USART       ; Variant for Serial control via USART3 input
-;default_envs = VARIANT_NUNCHUK     ; Variant for Nunchuk controlled vehicle build
-;default_envs = VARIANT_PPM         ; Variant for RC-Remotes with PPM-Sum signal
-;default_envs = VARIANT_PWM         ; Variant for RC-Remotes with PWM signal
-;default_envs = VARIANT_IBUS        ; Variant for RC-Remotes with FLYSKY IBUS
-;default_envs = VARIANT_HOVERCAR    ; Variant for HOVERCAR build
-;default_envs = VARIANT_HOVERBOARD  ; Variant for HOVERBOARD
-;default_envs = VARIANT_TRANSPOTTER ; Variant for TRANSPOTTER build https://github.com/NiklasFauth/hoverboard-firmware-hack/wiki/Build-Instruction:-TranspOtter https://hackaday.io/project/161891-transpotter-ng
-;default_envs = VARIANT_SKATEBOARD  ; Variant for SKATEBOARD build controlled via RC-Remotes with PWM signal
-;================================================================
-
-;================================================================
-
-[env:VARIANT_ADC]
-platform        = ststm32
-framework       = stm32cube
-board           = genericSTM32F103RC
-debug_tool      = stlink
-upload_protocol = stlink
-
-; Serial Port settings (make sure the COM port is correct)
-monitor_port    = COM5
-monitor_speed   = 115200
-
-build_flags =
-    -DUSE_HAL_DRIVER
-    -DSTM32F103xE
-    -T./STM32F103RCTx_FLASH.ld
-    -lc
-    -lm
-    -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_ADC
-
-;================================================================
-
-[env:VARIANT_USART]
+[env:Patrick]
 platform        = ststm32
 framework       = stm32cube
 board           = genericSTM32F103RC
@@ -53,7 +13,7 @@ debug_tool      = stlink
 upload_protocol = stlink
 
 ; Serial Port settings (make sure the COM port is correct)
-monitor_port    = COM5
+monitor_port    = /dev/ttyUSB0
 monitor_speed   = 115200
 
 build_flags =
@@ -63,151 +23,3 @@ build_flags =
     -lc
     -lm
     -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_USART
-
-;================================================================
-
-[env:VARIANT_NUNCHUK]
-platform        = ststm32
-framework       = stm32cube
-board           = genericSTM32F103RC
-debug_tool      = stlink
-upload_protocol = stlink
-
-build_flags =
-    -DUSE_HAL_DRIVER
-    -DSTM32F103xE
-    -T./STM32F103RCTx_FLASH.ld
-    -lc
-    -lm
-    -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_NUNCHUK
-
-;================================================================
-
-[env:VARIANT_PPM]
-platform        = ststm32
-framework       = stm32cube
-board           = genericSTM32F103RC
-debug_tool      = stlink
-upload_protocol = stlink
-
-build_flags =
-    -DUSE_HAL_DRIVER
-    -DSTM32F103xE
-    -T./STM32F103RCTx_FLASH.ld
-    -lc
-    -lm
-    -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_PPM
-
-;================================================================
-
-[env:VARIANT_PWM]
-platform        = ststm32
-framework       = stm32cube
-board           = genericSTM32F103RC
-debug_tool      = stlink
-upload_protocol = stlink
-
-build_flags =
-    -DUSE_HAL_DRIVER
-    -DSTM32F103xE
-    -T./STM32F103RCTx_FLASH.ld
-    -lc
-    -lm
-    -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_PWM
-
-;================================================================
-
-[env:VARIANT_IBUS]
-platform        = ststm32
-framework       = stm32cube
-board           = genericSTM32F103RC
-debug_tool      = stlink
-upload_protocol = stlink
-
-build_flags =
-    -DUSE_HAL_DRIVER
-    -DSTM32F103xE
-    -T./STM32F103RCTx_FLASH.ld
-    -lc
-    -lm
-    -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_IBUS
-
-;================================================================
-
-[env:VARIANT_HOVERCAR]
-platform        = ststm32
-framework       = stm32cube
-board           = genericSTM32F103RC
-debug_tool      = stlink
-upload_protocol = stlink
-
-build_flags =
-    -DUSE_HAL_DRIVER
-    -DSTM32F103xE
-    -T./STM32F103RCTx_FLASH.ld
-    -lc
-    -lm
-    -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_HOVERCAR
-
-;================================================================
-
-[env:VARIANT_HOVERBOARD]
-platform        = ststm32
-framework       = stm32cube
-board           = genericSTM32F103RC
-debug_tool      = stlink
-upload_protocol = stlink
-
-build_flags =
-    -DUSE_HAL_DRIVER
-    -DSTM32F103xE
-    -T./STM32F103RCTx_FLASH.ld
-    -lc
-    -lm
-    -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_HOVERBOARD
-
-;================================================================
-
-[env:VARIANT_TRANSPOTTER]
-platform        = ststm32
-framework       = stm32cube
-board           = genericSTM32F103RC
-debug_tool      = stlink
-upload_protocol = stlink
-
-build_flags =
-    -DUSE_HAL_DRIVER
-    -DSTM32F103xE
-    -T./STM32F103RCTx_FLASH.ld
-    -lc
-    -lm
-    -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_TRANSPOTTER
-    
-;================================================================
-
-
-[env:VARIANT_SKATEBOARD]
-platform        = ststm32
-framework       = stm32cube
-board           = genericSTM32F103RC
-debug_tool      = stlink
-upload_protocol = stlink
-
-build_flags =
-    -DUSE_HAL_DRIVER
-    -DSTM32F103xE
-    -T./STM32F103RCTx_FLASH.ld
-    -lc
-    -lm
-    -g -ggdb        ; to generate correctly the 'firmware.elf' for STM STUDIO vizualization
-    -D VARIANT_SKATEBOARD
-    
-;================================================================
